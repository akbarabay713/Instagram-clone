import Head from "next/head";
import Content from "../components/Content";
import Header from "./../components/Header";
import { signOut } from "firebase/auth";
import { useRecoilState, useSetRecoilState } from "recoil";
import { auth, db, storage } from "../firebase";
import { useAuthState } from "react-firebase-hooks/auth";
import {
  collection,
  orderBy,
  onSnapshot,
  query,
  addDoc,
  serverTimestamp,
  updateDoc,
  doc,
} from "firebase/firestore";
import {
  captionState,
  loadingState,
  modalState,
  selectedFileState,
} from "./../atoms/stateAtom";
import { getUsername } from "../helpers/helper";
import { useEffect, useState } from "react";
import { getDownloadURL, ref, uploadString } from "firebase/storage";

export default function Home({ post }) {
  // const [allPost, setAllPost] = useState([JSON.parse(post)]);
  // const allPost = JSON.parse(post);

  const [selectedFile, setSelectedFile] = useRecoilState(selectedFileState);
  const [caption, setCaption] = useRecoilState(captionState);
  const [loading, setLoading] = useRecoilState(loadingState);
  const setOpen = useSetRecoilState(modalState);
  const [user] = useAuthState(auth);
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    const unsubscribe = onSnapshot(
      query(collection(db, "posts"), orderBy("timestamp", "desc")),
      (snapshot) => {
        setPosts(snapshot.docs);
      }
    );

    return unsubscribe;
  }, []);

  const handleAddImage = (e) => {
    const reader = new FileReader();
    if (e.target.files[0]) {
      reader.readAsDataURL(e.target.files[0]);
    }
    reader.onload = (readerEvent) => {
      setSelectedFile(readerEvent.target.result);
    };
  };

  // const HandlePostImage = async (e) => {
  //   if (loading) return;
  //   e.preventDefault();
  //   fetch("/api/uploadFeed", {
  //     method: "POST",
  //     body: JSON.stringify({
  //       caption: caption,
  //       username: getUsername(user.displayName),
  //       profileImg: user.photoURL,
  //       selectedFile: selectedFile,
  //     }),
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //   })
  //     .then((response) => response.json())
  //     .then((data) => console.log(data))
  //     .then(setSelectedFile(null))
  //     .then(setCaption(null))
  //     .then(setLoading(true))
  //     .then(setOpen(false))
  //     .catch((error) => {
  //       // console.log(error)
  //     });

  //   setLoading(false);
  // };

  const HandlePostImage = async (e) => {
    if (loading) return;
    e.preventDefault();
    const docRef = await addDoc(collection(db, "posts"), {
      caption: caption,
      username: getUsername(user.displayName),
      profileImg: user.photoURL,
      timestamp: serverTimestamp(),
    });
    console.log("Document written with ID: ", docRef.id);

    const imagesRef = ref(storage, `posts/${docRef.id}/images`);

    uploadString(imagesRef, selectedFile, "data_url").then(async (snapshot) => {
      console.log("Uploaded a data_url string!");
      const downloadUrl = await getDownloadURL(imagesRef);
      await updateDoc(doc(db, "posts", docRef.id), {
        images: downloadUrl,
      });
      setLoading(true);
    });

    setSelectedFile(null);
    setCaption(null);
    setLoading(false);
    setOpen(false);
  };

  const handleSignOut = () => {
    signOut(auth)
      .then(() => {
        // Sign-out successful.
        console.log("logging out");
      })
      .catch((error) => {
        // An error happened.
        console.log(error);
      });
  };

  return (
    <>
      <Head>
        <title>Instagram Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        addImage={(e) => handleAddImage(e)}
        postImage={(e) => HandlePostImage(e)}
      />
      <Content
        posts={posts}
        signOut={handleSignOut}
        profileImg={user.photoURL}
        username={user.displayName}
        comment={(e) => handleComment(e)}
      />
    </>
  );
}

// export async function getServerSideProps(context) {
//   const postRef = collection(db, "posts");
//   const postRes = await getDocs(postRef, orderBy("timestamp", "desc"));

//   const posts = postRes?.docs.map((doc) => ({ ...doc.data(), id: doc.id }));
//   console.log(posts);

//   return {
//     props: { post: JSON.stringify(posts) },
//   };
// }
